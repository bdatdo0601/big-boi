{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Lambda Function resource stack creation using Amplify CLI",
  "Parameters": {
    "CloudWatchRule": {
      "Type": "String",
      "Default": "NONE",
      "Description": " Schedule Expression"
    },
    "deploymentBucketName": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    },
    "s3Key": {
      "Type": "String"
    },
    "apibigboiapiGraphQLAPIIdOutput": {
      "Type": "String",
      "Default": "apibigboiapiGraphQLAPIIdOutput"
    },
    "apibigboiapiGraphQLAPIEndpointOutput": {
      "Type": "String",
      "Default": "apibigboiapiGraphQLAPIEndpointOutput"
    },
    "apibigboiapiGraphQLAPIKeyOutput": {
      "Type": "String",
      "Default": "apibigboiapiGraphQLAPIKeyOutput"
    },
    "storagebigboicontentBucketName": {
      "Type": "String",
      "Default": "storagebigboicontentBucketName"
    },
    "apibigboiexternalapiApiName": {
      "Type": "String",
      "Default": "apibigboiexternalapiApiName"
    },
    "apibigboiexternalapiApiId": {
      "Type": "String",
      "Default": "apibigboiexternalapiApiId"
    },
    "analyticsbigboianalyticsId": {
      "Type": "String",
      "Default": "analyticsbigboianalyticsId"
    },
    "analyticsbigboianalyticsRegion": {
      "Type": "String",
      "Default": "analyticsbigboianalyticsRegion"
    },
    "analyticsbigboidefaultkinesiskinesisStreamArn": {
      "Type": "String",
      "Default": "analyticsbigboidefaultkinesiskinesisStreamArn"
    },
    "notionIntegrationToken": {
      "Type": "String"
    },
    "notionBlogpostBlockid": {
      "Type": "String"
    },
    "eventApiKey": {
      "Type": "String"
    },
    "eventApiEndpoint": {
      "Type": "String"
    }
  },
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    }
  },
  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Metadata": {
        "aws:asset:path": "./src",
        "aws:asset:property": "Code"
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "deploymentBucketName"
          },
          "S3Key": {
            "Ref": "s3Key"
          }
        },
        "Handler": "index.handler",
        "FunctionName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "bigboiblogpoller",
            {
              "Fn::Join": [
                "",
                [
                  "bigboiblogpoller",
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "Environment": {
          "Variables": {
            "ENV": {
              "Ref": "env"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "API_BIGBOIAPI_GRAPHQLAPIIDOUTPUT": {
              "Ref": "apibigboiapiGraphQLAPIIdOutput"
            },
            "API_BIGBOIAPI_GRAPHQLAPIENDPOINTOUTPUT": {
              "Ref": "apibigboiapiGraphQLAPIEndpointOutput"
            },
            "API_BIGBOIAPI_GRAPHQLAPIKEYOUTPUT": {
              "Ref": "apibigboiapiGraphQLAPIKeyOutput"
            },
            "STORAGE_BIGBOICONTENT_BUCKETNAME": {
              "Ref": "storagebigboicontentBucketName"
            },
            "API_BIGBOIEXTERNALAPI_APINAME": {
              "Ref": "apibigboiexternalapiApiName"
            },
            "API_BIGBOIEXTERNALAPI_APIID": {
              "Ref": "apibigboiexternalapiApiId"
            },
            "ANALYTICS_BIGBOIANALYTICS_ID": {
              "Ref": "analyticsbigboianalyticsId"
            },
            "ANALYTICS_BIGBOIANALYTICS_REGION": {
              "Ref": "analyticsbigboianalyticsRegion"
            },
            "ANALYTICS_BIGBOIDEFAULTKINESIS_KINESISSTREAMARN": {
              "Ref": "analyticsbigboidefaultkinesiskinesisStreamArn"
            },
            "NOTION_INTEGRATION_TOKEN": {
              "Ref": "notionIntegrationToken"
            },
            "NOTION_BLOGPOST_BLOCKID": {
              "Ref": "notionBlogpostBlockid"
            },
            "EVENT_API_KEY": {
              "Ref": "eventApiKey"
            },
            "EVENT_API_ENDPOINT": {
              "Ref": "eventApiEndpoint"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs14.x",
        "Timeout": 25
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "bigboiLambdaRole0114ed15",
            {
              "Fn::Join": [
                "",
                [
                  "bigboiLambdaRole0114ed15",
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "lambdaexecutionpolicy": {
      "DependsOn": [
        "LambdaExecutionRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "lambda-execution-policy",
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "LambdaFunction"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "AmplifyResourcesPolicy": {
      "DependsOn": [
        "LambdaExecutionRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "amplify-lambda-execution-policy",
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:ListBucket",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "storagebigboicontentBucketName"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "storagebigboicontentBucketName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "appsync:Create*",
                "appsync:StartSchemaCreation",
                "appsync:GraphQL",
                "appsync:Get*",
                "appsync:List*",
                "appsync:Update*",
                "appsync:Delete*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:appsync:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apis/",
                      {
                        "Ref": "apibigboiapiGraphQLAPIIdOutput"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:appsync:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apis/",
                      {
                        "Ref": "apibigboiapiGraphQLAPIIdOutput"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "apigateway:POST",
                "apigateway:PUT",
                "apigateway:GET",
                "apigateway:HEAD",
                "apigateway:OPTIONS",
                "apigateway:PATCH",
                "apigateway:DELETE"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      "::/restapis/",
                      {
                        "Ref": "apibigboiexternalapiApiName"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "mobiletargeting:Put*",
                "mobiletargeting:Create*",
                "mobiletargeting:Send*",
                "mobiletargeting:Get*",
                "mobiletargeting:List*",
                "mobiletargeting:Update*",
                "mobiletargeting:Delete*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:mobiletargeting:",
                      {
                        "Ref": "analyticsbigboianalyticsRegion"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apps/",
                      {
                        "Ref": "analyticsbigboianalyticsId"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:mobiletargeting:",
                      {
                        "Ref": "analyticsbigboianalyticsRegion"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":apps/",
                      {
                        "Ref": "analyticsbigboianalyticsId"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:CreateStream",
                "kinesis:RegisterStreamConsumer",
                "kinesis:AddTagsToStream",
                "kinesis:ListShards",
                "kinesis:ListStreams",
                "kinesis:ListStreamConsumers",
                "kinesis:DescribeStream",
                "kinesis:DescribeStreamSummary",
                "kinesis:DescribeStreamConsumer",
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:SubscribeToShard",
                "kinesis:DescribeLimits",
                "kinesis:ListTagsForStream",
                "kinesis:SubscribeToShard",
                "kinesis:EnableEnhancedMonitoring",
                "kinesis:DisableEnhancedMonitoring",
                "kinesis:IncreaseStreamRetentionPeriod",
                "kinesis:DecreaseStreamRetentionPeriod",
                "kinesis:MergeShards",
                "kinesis:PutRecord",
                "kinesis:PutRecords",
                "kinesis:SplitShard",
                "kinesis:UpdateShardCount",
                "kinesis:DeleteStream",
                "kinesis:DeregisterStreamConsumer",
                "kinesis:RemoveTagsFromStream"
              ],
              "Resource": {
                "Ref": "analyticsbigboidefaultkinesiskinesisStreamArn"
              }
            }
          ]
        }
      }
    },
    "CloudWatchEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Schedule rule for Lambda",
        "ScheduleExpression": {
          "Ref": "CloudWatchRule"
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LambdaFunction",
                "Arn"
              ]
            },
            "Id": {
              "Ref": "LambdaFunction"
            }
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "LambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEvent",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "Name": {
      "Value": {
        "Ref": "LambdaFunction"
      }
    },
    "Arn": {
      "Value": {
        "Fn::GetAtt": [
          "LambdaFunction",
          "Arn"
        ]
      }
    },
    "Region": {
      "Value": {
        "Ref": "AWS::Region"
      }
    },
    "LambdaExecutionRole": {
      "Value": {
        "Ref": "LambdaExecutionRole"
      }
    },
    "CloudWatchEventRule": {
      "Value": {
        "Ref": "CloudWatchEvent"
      }
    },
    "LambdaExecutionRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "LambdaExecutionRole",
          "Arn"
        ]
      }
    }
  }
}